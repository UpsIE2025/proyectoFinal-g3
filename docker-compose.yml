version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
  #Pendiente: Generar el war
  #micro_producer:
  #  image: micro_producer:latest
  #  build:
  #    context: ./micro_producer # Ruta donde está el Dockerfile
  #    dockerfile: Dockerfile
  #  ports:
  #    - "8081:8080"  # ✅ El puerto 8080 del contenedor se expone como 8081 en el host
  #  depends_on:
  #    - kafka

  #Pendiente: Generar el war
  #micro_consumer:
  #  image: micro_consumer:latest
  #  build:
  #    context: ./micro_consumer # Ruta donde está el Dockerfile
  #    dockerfile: Dockerfile
  #  ports:
  #    - "8082:8082"
  #  depends_on:
  #    - kafka
  
  #Pendiente: Verificar si es el mismo graphql_project
  #graphql_service:
  #  build: .
  #  container_name: graphql_service
  #  ports:
  #    - "8000:8000"
  #  depends_on:
  #    - kafka
  #  environment:
  #    - KAFKA_BROKER=kafka:9092
  #    #- DATABASE_URL=postgresql://postgres:password@postgres:5432/mydatabase
  
  # Servicio de API Gateway con Kong
  kong:
    image: kong:latest
    container_name: kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
    ports:
      - "8000:8000"  # Puerto para la API (Kong -> graphql_proyect, auth0_app_kong)
      - "8443:8443"  # Puerto HTTPS
      - "8001:8001"  # Administración HTTP
      - "8444:8444"  # Administración HTTPS
    volumes:
      - ./auth0_app_kong/gateway/kong.yml:/etc/kong/kong.yml  # Montamos la configuración de Kong
    depends_on:
      - graphql_project
    networks:
      - kong-network

  # Servicio del microservicio en Python (FastAPI)
  graphql_project:
    build:
      context: ./graphql_project # Ruta donde está el Dockerfile
      dockerfile: Dockerfile
    container_name: graphql_project
    restart: always
    ports:
      - "8002:8000"  # Exponer puerto interno 8000 en 8002 para pruebas directas
    networks:
      - kong-network
  
  #Pendiente configurar Dockerfile, y comprobar puertos
  #auth0_app_kong:
  #  build:
  #    context: ./auth0_app_kong # Ruta donde está el Dockerfile
  #    dockerfile: Dockerfile       
  #  container_name: auth0_app_kong
  #  restart: always
  #  ports:
  #    - "8003:8000"  # Exponer puerto interno 8003 en 8004 para pruebas directas
  #  networks:
  #    - kong-network

networks:
  kong-network:
    driver: bridge